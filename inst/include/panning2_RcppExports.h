// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_panning2_RCPPEXPORTS_H_GEN_
#define RCPP_panning2_RCPPEXPORTS_H_GEN_

#include <RcppArmadillo.h>
#include <RcppMLPACK.h>
#include <Rcpp.h>

namespace panning2 {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("panning2", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("panning2", "_panning2_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in panning2");
            }
        }
    }

    inline arma::vec log_reg(arma::mat X, arma::vec y) {
        typedef SEXP(*Ptr_log_reg)(SEXP,SEXP);
        static Ptr_log_reg p_log_reg = NULL;
        if (p_log_reg == NULL) {
            validateSignature("arma::vec(*log_reg)(arma::mat,arma::vec)");
            p_log_reg = (Ptr_log_reg)R_GetCCallable("panning2", "_panning2_log_reg");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_log_reg(Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(y)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::vec >(rcpp_result_gen);
    }

    inline arma::vec pred_log_reg(arma::mat X, arma::vec y, arma::mat X_new) {
        typedef SEXP(*Ptr_pred_log_reg)(SEXP,SEXP,SEXP);
        static Ptr_pred_log_reg p_pred_log_reg = NULL;
        if (p_pred_log_reg == NULL) {
            validateSignature("arma::vec(*pred_log_reg)(arma::mat,arma::vec,arma::mat)");
            p_pred_log_reg = (Ptr_pred_log_reg)R_GetCCallable("panning2", "_panning2_pred_log_reg");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_pred_log_reg(Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(y)), Shield<SEXP>(Rcpp::wrap(X_new)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::vec >(rcpp_result_gen);
    }

    inline double cross_validation_logistic(arma::mat& X, arma::vec& y, unsigned int K, unsigned int M) {
        typedef SEXP(*Ptr_cross_validation_logistic)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_cross_validation_logistic p_cross_validation_logistic = NULL;
        if (p_cross_validation_logistic == NULL) {
            validateSignature("double(*cross_validation_logistic)(arma::mat&,arma::vec&,unsigned int,unsigned int)");
            p_cross_validation_logistic = (Ptr_cross_validation_logistic)R_GetCCallable("panning2", "_panning2_cross_validation_logistic");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cross_validation_logistic(Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(y)), Shield<SEXP>(Rcpp::wrap(K)), Shield<SEXP>(Rcpp::wrap(M)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

}

#endif // RCPP_panning2_RCPPEXPORTS_H_GEN_
