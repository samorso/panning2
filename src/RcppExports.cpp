// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/panning2.h"
#include <RcppArmadillo.h>
#include <RcppMLPACK.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// log_reg
arma::vec log_reg(arma::mat X, arma::vec y);
static SEXP _panning2_log_reg_try(SEXP XSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(log_reg(X, y));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _panning2_log_reg(SEXP XSEXP, SEXP ySEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_panning2_log_reg_try(XSEXP, ySEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// pred_log_reg
arma::vec pred_log_reg(arma::mat X, arma::vec y, arma::mat X_new);
static SEXP _panning2_pred_log_reg_try(SEXP XSEXP, SEXP ySEXP, SEXP X_newSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X_new(X_newSEXP);
    rcpp_result_gen = Rcpp::wrap(pred_log_reg(X, y, X_new));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _panning2_pred_log_reg(SEXP XSEXP, SEXP ySEXP, SEXP X_newSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_panning2_pred_log_reg_try(XSEXP, ySEXP, X_newSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cross_validation_logistic
double cross_validation_logistic(arma::mat& X, arma::vec& y, unsigned int K, unsigned int M);
static SEXP _panning2_cross_validation_logistic_try(SEXP XSEXP, SEXP ySEXP, SEXP KSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(cross_validation_logistic(X, y, K, M));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _panning2_cross_validation_logistic(SEXP XSEXP, SEXP ySEXP, SEXP KSEXP, SEXP MSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_panning2_cross_validation_logistic_try(XSEXP, ySEXP, KSEXP, MSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _panning2_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("arma::vec(*log_reg)(arma::mat,arma::vec)");
        signatures.insert("arma::vec(*pred_log_reg)(arma::mat,arma::vec,arma::mat)");
        signatures.insert("double(*cross_validation_logistic)(arma::mat&,arma::vec&,unsigned int,unsigned int)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _panning2_RcppExport_registerCCallable() { 
    R_RegisterCCallable("panning2", "_panning2_log_reg", (DL_FUNC)_panning2_log_reg_try);
    R_RegisterCCallable("panning2", "_panning2_pred_log_reg", (DL_FUNC)_panning2_pred_log_reg_try);
    R_RegisterCCallable("panning2", "_panning2_cross_validation_logistic", (DL_FUNC)_panning2_cross_validation_logistic_try);
    R_RegisterCCallable("panning2", "_panning2_RcppExport_validate", (DL_FUNC)_panning2_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_panning2_log_reg", (DL_FUNC) &_panning2_log_reg, 2},
    {"_panning2_pred_log_reg", (DL_FUNC) &_panning2_pred_log_reg, 3},
    {"_panning2_cross_validation_logistic", (DL_FUNC) &_panning2_cross_validation_logistic, 4},
    {"_panning2_RcppExport_registerCCallable", (DL_FUNC) &_panning2_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_panning2(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
